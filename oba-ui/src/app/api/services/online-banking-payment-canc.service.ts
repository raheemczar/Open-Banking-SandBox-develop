/*
 * Copyright 2018-2022 adorsys GmbH & Co KG
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version. This program is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/.
 *
 * This project is also available under a separate commercial license. You can
 * contact us at psd2@adorsys.com.
 */

/* tslint:disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { BaseService as __BaseService } from '../base-service';
import { ApiConfiguration as __Configuration } from '../api-configuration';
import { Observable } from 'rxjs';
import { filter as __filter, map, map as __map } from 'rxjs/operators';
import { SCAPaymentResponseTO } from '../models/scapayment-response-to';
import { StrictHttpResponse } from '../strict-http-response';

/**
 * Oba Pis Controller
 */
@Injectable({
  providedIn: 'root',
})
class OnlineBankingPaymentCancService extends __BaseService {
  static readonly cancellationBase = '/api/v1/payment/cancellation';

  constructor(config: __Configuration, http: HttpClient) {
    super(config, http);
  }

  /**
   * Initiate periodic payment cancellation during Oba session
   * @param paymentId paymentId
   * @return OK
   */
  initiatePaymentCancellation(
    paymentId: string
  ): Observable<SCAPaymentResponseTO> {
    let params = this.newParams().append('paymentId', paymentId);
    return this.http.post(
      this.rootUrl + OnlineBankingPaymentCancService.cancellationBase,
      null,
      { params: params }
    );
  }

  /**
   *
   * @param paymentId paymentId
   * @param scaMethodId second factor method id
   * @param cancellationId optional if not set, a new one will be generated by backend
   */
  startSca(
    paymentId: string,
    scaMethodId: string,
    cancellationId?: string
  ): Observable<SCAPaymentResponseTO> {
    let params = this.newParams()
      .append('paymentId', paymentId)
      .append('scaMethodId', scaMethodId)
      .append('cancellationId', cancellationId);

    return this.http.post(
      this.rootUrl + OnlineBankingPaymentCancService.cancellationBase + '/sca',
      null,
      { params: params }
    );
  }

  /**
   * Verify code and execute cancellation
   * @param paymentId paymentId
   * @param authCode authCode received by customer in previous step
   * @param cancellationId authorization id created in previous step
   */
  verifyCode(
    paymentId: string,
    authCode: string,
    cancellationId: string
  ): Observable<any> {
    let params = this.newParams()
      .append('paymentId', paymentId)
      .append('authCode', authCode)
      .append('cancellationId', cancellationId);

    return this.http.put(
      this.rootUrl +
        OnlineBankingPaymentCancService.cancellationBase +
        '/confirmation',
      null,
      { params: params }
    );
  }
}

export { OnlineBankingPaymentCancService };
